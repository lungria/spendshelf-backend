// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"context"

	"github.com/lungria/spendshelf-backend/storage"

	"github.com/lungria/spendshelf-backend/importer"

	"github.com/rs/zerolog/log"

	"github.com/lungria/spendshelf-backend/transaction/interval"

	"github.com/lungria/spendshelf-backend/api"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/lungria/spendshelf-backend/account"
	"github.com/lungria/spendshelf-backend/app/config"
	"github.com/lungria/spendshelf-backend/budget"
	"github.com/lungria/spendshelf-backend/importer/mono"
	"github.com/lungria/spendshelf-backend/transaction"
	"github.com/lungria/spendshelf-backend/transaction/category"
)

func Initialize() (*App, error) {
	cfg, err := config.FromEnv()
	if err != nil {
		return nil, err
	}

	client := mono.NewClient(cfg.MonoBaseURL, cfg.MonoAPIKey)
	// todo: ping API?

	pool, err := pgxpool.Connect(context.Background(), cfg.DBConnString)
	if err != nil {
		return nil, err
	}

	r1 := account.NewRepository(pool)
	h1 := account.NewHandler(r1)
	im1 := account.NewImporter(client, r1)

	r2 := budget.NewRepository(pool)
	h2 := budget.NewHandler(r2)

	r3 := category.NewRepository(pool)
	r4 := transaction.NewRepository(pool)
	h4 := transaction.NewHandler(r4, r3)
	gen := interval.NewGenerator(r4)
	im2 := transaction.NewImporter(client, r4, gen)

	srv1 := api.NewServer(cfg, h1, h2, h4)

	im3 := importer.NewImporter(im1, im2)
	srv2 := importer.NewWorker(im3, cfg.MonoAccountID)

	srv3 := storage.NewWorker(pool)

	state := NewApp(&log.Logger)
	state.RegisterWorkers(srv1, srv2, srv3)

	return state, nil
}
