// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	account2 "github.com/lungria/spendshelf-backend/account"

	"github.com/lungria/spendshelf-backend/importer/mono"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ account2.Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//     func TestSomethingThatUsesStorage(t *testing.T) {
//
//         // make and configure a mocked Storage
//         mockedStorage := &StorageMock{
//             SaveFunc: func(ctx context.Context, account storage.Account) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedStorage in code that requires Storage
//         // and then make assertions.
//
//     }
type StorageMock struct {
	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, account account2.Account) error

	// calls tracks calls to the methods.
	calls struct {
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account account2.Account
		}
	}
	lockSave sync.RWMutex
}

// Save calls SaveFunc.
func (mock *StorageMock) Save(ctx context.Context, account account2.Account) error {
	if mock.SaveFunc == nil {
		panic("StorageMock.SaveFunc: method is nil but Storage.Save was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account account2.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, account)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedStorage.SaveCalls())
func (mock *StorageMock) SaveCalls() []struct {
	Ctx     context.Context
	Account account2.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account account2.Account
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Ensure, that BankAPIMock does implement BankAPI.
// If this is not the case, regenerate this file with moq.
var _ account2.BankAPI = &BankAPIMock{}

// BankAPIMock is a mock implementation of BankAPI.
//
//     func TestSomethingThatUsesBankAPI(t *testing.T) {
//
//         // make and configure a mocked BankAPI
//         mockedBankAPI := &BankAPIMock{
//             GetUserInfoFunc: func(ctx context.Context) ([]mono.Account, error) {
// 	               panic("mock out the GetUserInfo method")
//             },
//         }
//
//         // use mockedBankAPI in code that requires BankAPI
//         // and then make assertions.
//
//     }
type BankAPIMock struct {
	// GetUserInfoFunc mocks the GetUserInfo method.
	GetUserInfoFunc func(ctx context.Context) ([]mono.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserInfo holds details about calls to the GetUserInfo method.
		GetUserInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetUserInfo sync.RWMutex
}

// GetUserInfo calls GetUserInfoFunc.
func (mock *BankAPIMock) GetUserInfo(ctx context.Context) ([]mono.Account, error) {
	if mock.GetUserInfoFunc == nil {
		panic("BankAPIMock.GetUserInfoFunc: method is nil but BankAPI.GetUserInfo was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetUserInfo.Lock()
	mock.calls.GetUserInfo = append(mock.calls.GetUserInfo, callInfo)
	mock.lockGetUserInfo.Unlock()
	return mock.GetUserInfoFunc(ctx)
}

// GetUserInfoCalls gets all the calls that were made to GetUserInfo.
// Check the length with:
//     len(mockedBankAPI.GetUserInfoCalls())
func (mock *BankAPIMock) GetUserInfoCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetUserInfo.RLock()
	calls = mock.calls.GetUserInfo
	mock.lockGetUserInfo.RUnlock()
	return calls
}
