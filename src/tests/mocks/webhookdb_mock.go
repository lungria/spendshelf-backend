// Code generated by MockGen. DO NOT EDIT.
// Source: transactions.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/lungria/spendshelf-backend/src/models"
	reflect "reflect"
)

// MockTransactionsRepository is a mock of TransactionsRepository interface
type MockTransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepositoryMockRecorder
}

// MockTransactionsRepositoryMockRecorder is the mock recorder for MockTransactionsRepository
type MockTransactionsRepositoryMockRecorder struct {
	mock *MockTransactionsRepository
}

// NewMockTransactionsRepository creates a new mock instance
func NewMockTransactionsRepository(ctrl *gomock.Controller) *MockTransactionsRepository {
	mock := &MockTransactionsRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionsRepository) EXPECT() *MockTransactionsRepositoryMockRecorder {
	return m.recorder
}

// GetTransactionByID mocks base method
func (m *MockTransactionsRepository) GetTransactionByID(transactionID string) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", transactionID)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID
func (mr *MockTransactionsRepositoryMockRecorder) GetTransactionByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionsRepository)(nil).GetTransactionByID), transactionID)
}

// GetAllTransactions mocks base method
func (m *MockTransactionsRepository) GetAllTransactions(accountID string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions", accountID)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions
func (mr *MockTransactionsRepositoryMockRecorder) GetAllTransactions(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionsRepository)(nil).GetAllTransactions), accountID)
}

// SaveOneTransaction mocks base method
func (m *MockTransactionsRepository) SaveOneTransaction(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOneTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOneTransaction indicates an expected call of SaveOneTransaction
func (mr *MockTransactionsRepositoryMockRecorder) SaveOneTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOneTransaction", reflect.TypeOf((*MockTransactionsRepository)(nil).SaveOneTransaction), transaction)
}
