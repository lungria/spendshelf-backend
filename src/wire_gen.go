// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/lungria/spendshelf-backend/src/api"
	"github.com/lungria/spendshelf-backend/src/categories"
	"github.com/lungria/spendshelf-backend/src/config"
	"github.com/lungria/spendshelf-backend/src/db"
	"github.com/lungria/spendshelf-backend/src/transactions"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeServer() (*api.Server, error) {
	environmentConfiguration, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	logger, err := zapProvider()
	if err != nil {
		return nil, err
	}
	database, err := db.NewDatabase(environmentConfiguration)
	if err != nil {
		return nil, err
	}
	repository := categories.NewRepository(database)
	sugaredLogger := sugarProvider(logger)
	handler := categories.NewHandler(repository, sugaredLogger)
	transactionsRepository := transactions.NewRepository(database, sugaredLogger)
	transactionsHandler := transactions.NewHandler(transactionsRepository, sugaredLogger)
	v := api.RoutesProvider(handler, transactionsHandler)
	pipelineBuilder := api.NewPipelineBuilder(logger, v)
	server := api.NewServer(environmentConfiguration, logger, pipelineBuilder)
	return server, nil
}

// wire.go:

func sugarProvider(logger *zap.Logger) *zap.SugaredLogger {
	return logger.Sugar()
}

func zapProvider() (*zap.Logger, error) {
	return zap.NewProduction()
}
