// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/lungria/spendshelf-backend/src/app"
	"github.com/lungria/spendshelf-backend/src/categories"
	"github.com/lungria/spendshelf-backend/src/config"
	"github.com/lungria/spendshelf-backend/src/db"
	"github.com/lungria/spendshelf-backend/src/mqtt"
	"github.com/lungria/spendshelf-backend/src/transactions"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeServer() (*app.App, error) {
	environmentConfiguration, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	logger, err := zapProvider()
	if err != nil {
		return nil, err
	}
	database, err := db.NewDbConnection(environmentConfiguration)
	if err != nil {
		return nil, err
	}
	sugaredLogger := sugarProvider(logger)
	repository := categories.NewRepository(database, sugaredLogger)
	transactionsRepository := transactions.NewRepository(database, sugaredLogger, repository)
	handler := transactions.NewHandler(transactionsRepository, sugaredLogger)
	categoriesHandler := categories.NewHandler(repository, sugaredLogger)
	v := app.RoutesProvider(handler, categoriesHandler)
	pipelineBuilder := app.NewPipelineBuilder(logger, v)
	server := app.NewServer(environmentConfiguration, logger, pipelineBuilder, database)
	listener := mqtt.NewListener(environmentConfiguration, sugaredLogger, transactionsRepository)
	appApp := app.NewApp(server, listener, database, sugaredLogger)
	return appApp, nil
}

// wire.go:

func sugarProvider(logger *zap.Logger) *zap.SugaredLogger {
	return logger.Sugar()
}

func zapProvider() (*zap.Logger, error) {
	return zap.NewProduction()
}
