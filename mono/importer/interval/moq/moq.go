// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package moq

import (
	"context"
	"sync"
	"time"

	"github.com/lungria/spendshelf-backend/mono/importer/interval"
)

// Ensure, that TransactionsStorageMock does implement TransactionsStorage.
// If this is not the case, regenerate this file with moq.
var _ interval.TransactionsStorage = &TransactionsStorageMock{}

// TransactionsStorageMock is a mock implementation of TransactionsStorage.
//
//     func TestSomethingThatUsesTransactionsStorage(t *testing.T) {
//
//         // make and configure a mocked TransactionsStorage
//         mockedTransactionsStorage := &TransactionsStorageMock{
//             GetLastTransactionDateFunc: func(ctx context.Context, accountID string) (time.Time, error) {
// 	               panic("mock out the GetLastTransactionDate method")
//             },
//         }
//
//         // use mockedTransactionsStorage in code that requires TransactionsStorage
//         // and then make assertions.
//
//     }
type TransactionsStorageMock struct {
	// GetLastTransactionDateFunc mocks the GetLastTransactionDate method.
	GetLastTransactionDateFunc func(ctx context.Context, accountID string) (time.Time, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLastTransactionDate holds details about calls to the GetLastTransactionDate method.
		GetLastTransactionDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
	}
	lockGetLastTransactionDate sync.RWMutex
}

// GetLastTransactionDate calls GetLastTransactionDateFunc.
func (mock *TransactionsStorageMock) GetLastTransactionDate(ctx context.Context, accountID string) (time.Time, error) {
	if mock.GetLastTransactionDateFunc == nil {
		panic("TransactionsStorageMock.GetLastTransactionDateFunc: method is nil but TransactionsStorage.GetLastTransactionDate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetLastTransactionDate.Lock()
	mock.calls.GetLastTransactionDate = append(mock.calls.GetLastTransactionDate, callInfo)
	mock.lockGetLastTransactionDate.Unlock()
	return mock.GetLastTransactionDateFunc(ctx, accountID)
}

// GetLastTransactionDateCalls gets all the calls that were made to GetLastTransactionDate.
// Check the length with:
//     len(mockedTransactionsStorage.GetLastTransactionDateCalls())
func (mock *TransactionsStorageMock) GetLastTransactionDateCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockGetLastTransactionDate.RLock()
	calls = mock.calls.GetLastTransactionDate
	mock.lockGetLastTransactionDate.RUnlock()
	return calls
}
